/*
 * This file is generated by jOOQ.
 */
package com.example.codex.jooq.tables.records


import com.example.codex.jooq.tables.UserPrivilege

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Table

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Entity
@Table(
    name = "USER_PRIVILEGE"
)
open class UserPrivilegeRecord private constructor() : TableRecordImpl<UserPrivilegeRecord>(UserPrivilege.USER_PRIVILEGE), Record2<Long?, Long?> {

    @get:Column(name = "USER_ID")
    open var userId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "PRIVILEGE_ID")
    open var privilegeId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>
    override fun valuesRow(): Row2<Long?, Long?> = super.valuesRow() as Row2<Long?, Long?>
    override fun field1(): Field<Long?> = UserPrivilege.USER_PRIVILEGE.USER_ID
    override fun field2(): Field<Long?> = UserPrivilege.USER_PRIVILEGE.PRIVILEGE_ID
    override fun component1(): Long? = userId
    override fun component2(): Long? = privilegeId
    override fun value1(): Long? = userId
    override fun value2(): Long? = privilegeId

    override fun value1(value: Long?): UserPrivilegeRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): UserPrivilegeRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?): UserPrivilegeRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised UserPrivilegeRecord
     */
    constructor(userId: Long? = null, privilegeId: Long? = null): this() {
        this.userId = userId
        this.privilegeId = privilegeId
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised UserPrivilegeRecord
     */
    constructor(value: com.example.codex.jooq.tables.pojos.UserPrivilege?): this() {
        if (value != null) {
            this.userId = value.userId
            this.privilegeId = value.privilegeId
            resetTouchedOnNotNull()
        }
    }
}
