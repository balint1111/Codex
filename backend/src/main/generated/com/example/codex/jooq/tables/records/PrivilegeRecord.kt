/*
 * This file is generated by jOOQ.
 */
package com.example.codex.jooq.tables.records


import com.example.codex.jooq.tables.Privilege

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.persistence.UniqueConstraint

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Entity
@Table(
    name = "PRIVILEGE",
    uniqueConstraints = [
        UniqueConstraint(name = "CONSTRAINT_4", columnNames = [ "NAME" ])
    ]
)
open class PrivilegeRecord private constructor() : UpdatableRecordImpl<PrivilegeRecord>(Privilege.PRIVILEGE), Record2<Long?, String?> {

    @get:Id
    @get:GeneratedValue(strategy = GenerationType.IDENTITY)
    @get:Column(name = "ID", nullable = false)
    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "NAME", nullable = false, length = 50)
    open var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>
    override fun valuesRow(): Row2<Long?, String?> = super.valuesRow() as Row2<Long?, String?>
    override fun field1(): Field<Long?> = Privilege.PRIVILEGE.ID
    override fun field2(): Field<String?> = Privilege.PRIVILEGE.NAME
    override fun component1(): Long? = id
    override fun component2(): String = name
    override fun value1(): Long? = id
    override fun value2(): String = name

    override fun value1(value: Long?): PrivilegeRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): PrivilegeRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Long?, value2: String?): PrivilegeRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised PrivilegeRecord
     */
    constructor(id: Long? = null, name: String): this() {
        this.id = id
        this.name = name
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised PrivilegeRecord
     */
    constructor(value: com.example.codex.jooq.tables.pojos.Privilege?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            resetTouchedOnNotNull()
        }
    }
}
