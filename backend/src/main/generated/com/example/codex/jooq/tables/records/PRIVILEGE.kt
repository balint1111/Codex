/*
 * This file is generated by jOOQ.
 */
package com.example.codex.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PRIVILEGE() : UpdatableRecordImpl<PRIVILEGE>(com.example.codex.jooq.tables.PRIVILEGE.PRIVILEGE), Record2<Long?, String?> {

    open var ID: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var NAME: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>
    override fun valuesRow(): Row2<Long?, String?> = super.valuesRow() as Row2<Long?, String?>
    override fun field1(): Field<Long?> = com.example.codex.jooq.tables.PRIVILEGE.PRIVILEGE.ID
    override fun field2(): Field<String?> = com.example.codex.jooq.tables.PRIVILEGE.PRIVILEGE.NAME
    override fun component1(): Long? = ID
    override fun component2(): String? = NAME
    override fun value1(): Long? = ID
    override fun value2(): String? = NAME

    override fun value1(value: Long?): PRIVILEGE {
        set(0, value)
        return this
    }

    override fun value2(value: String?): PRIVILEGE {
        set(1, value)
        return this
    }

    override fun values(value1: Long?, value2: String?): PRIVILEGE {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised PRIVILEGE
     */
    constructor(ID: Long? = null, NAME: String? = null): this() {
        this.ID = ID
        this.NAME = NAME
        resetChangedOnNotNull()
    }
}
