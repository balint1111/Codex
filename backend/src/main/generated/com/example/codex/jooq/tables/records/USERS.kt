/*
 * This file is generated by jOOQ.
 */
package com.example.codex.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class USERS() : UpdatableRecordImpl<USERS>(com.example.codex.jooq.tables.USERS.USERS), Record4<Long?, String?, String?, Boolean?> {

    open var ID: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var USERNAME: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var PASSWORD: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var DELETED: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, String?, String?, Boolean?> = super.fieldsRow() as Row4<Long?, String?, String?, Boolean?>
    override fun valuesRow(): Row4<Long?, String?, String?, Boolean?> = super.valuesRow() as Row4<Long?, String?, String?, Boolean?>
    override fun field1(): Field<Long?> = com.example.codex.jooq.tables.USERS.USERS.ID
    override fun field2(): Field<String?> = com.example.codex.jooq.tables.USERS.USERS.USERNAME
    override fun field3(): Field<String?> = com.example.codex.jooq.tables.USERS.USERS.PASSWORD
    override fun field4(): Field<Boolean?> = com.example.codex.jooq.tables.USERS.USERS.DELETED
    override fun component1(): Long? = ID
    override fun component2(): String? = USERNAME
    override fun component3(): String? = PASSWORD
    override fun component4(): Boolean? = DELETED
    override fun value1(): Long? = ID
    override fun value2(): String? = USERNAME
    override fun value3(): String? = PASSWORD
    override fun value4(): Boolean? = DELETED

    override fun value1(value: Long?): USERS {
        set(0, value)
        return this
    }

    override fun value2(value: String?): USERS {
        set(1, value)
        return this
    }

    override fun value3(value: String?): USERS {
        set(2, value)
        return this
    }

    override fun value4(value: Boolean?): USERS {
        set(3, value)
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Boolean?): USERS {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised USERS
     */
    constructor(ID: Long? = null, USERNAME: String? = null, PASSWORD: String? = null, DELETED: Boolean? = null): this() {
        this.ID = ID
        this.USERNAME = USERNAME
        this.PASSWORD = PASSWORD
        this.DELETED = DELETED
        resetChangedOnNotNull()
    }
}
