/*
 * This file is generated by jOOQ.
 */
package com.example.codex.jooq.tables


import com.example.codex.jooq.DefaultSchema
import com.example.codex.jooq.keys.CONSTRAINT_4
import com.example.codex.jooq.keys.PK_PRIVILEGE

import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PRIVILEGE(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, com.example.codex.jooq.tables.records.PRIVILEGE>?,
    parentPath: InverseForeignKey<out Record, com.example.codex.jooq.tables.records.PRIVILEGE>?,
    aliased: Table<com.example.codex.jooq.tables.records.PRIVILEGE>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<com.example.codex.jooq.tables.records.PRIVILEGE>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>PRIVILEGE</code>
         */
        val PRIVILEGE: PRIVILEGE = PRIVILEGE()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.example.codex.jooq.tables.records.PRIVILEGE> = com.example.codex.jooq.tables.records.PRIVILEGE::class.java

    /**
     * The column <code>PRIVILEGE.ID</code>.
     */
    val ID: TableField<com.example.codex.jooq.tables.records.PRIVILEGE, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>PRIVILEGE.NAME</code>.
     */
    val NAME: TableField<com.example.codex.jooq.tables.records.PRIVILEGE, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<com.example.codex.jooq.tables.records.PRIVILEGE>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<com.example.codex.jooq.tables.records.PRIVILEGE>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<com.example.codex.jooq.tables.records.PRIVILEGE>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>PRIVILEGE</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PRIVILEGE</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PRIVILEGE</code> table reference
     */
    constructor(): this(DSL.name("privilege"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<com.example.codex.jooq.tables.records.PRIVILEGE, Long?> = super.getIdentity() as Identity<com.example.codex.jooq.tables.records.PRIVILEGE, Long?>
    override fun getPrimaryKey(): UniqueKey<com.example.codex.jooq.tables.records.PRIVILEGE> = PK_PRIVILEGE
    override fun getUniqueKeys(): List<UniqueKey<com.example.codex.jooq.tables.records.PRIVILEGE>> = listOf(CONSTRAINT_4)
    override fun `as`(alias: String): PRIVILEGE = PRIVILEGE(DSL.name(alias), this)
    override fun `as`(alias: Name): PRIVILEGE = PRIVILEGE(alias, this)
    override fun `as`(alias: Table<*>): PRIVILEGE = PRIVILEGE(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PRIVILEGE = PRIVILEGE(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PRIVILEGE = PRIVILEGE(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PRIVILEGE = PRIVILEGE(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PRIVILEGE = PRIVILEGE(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PRIVILEGE = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PRIVILEGE = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PRIVILEGE = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PRIVILEGE = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PRIVILEGE = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PRIVILEGE = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PRIVILEGE = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PRIVILEGE = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PRIVILEGE = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
